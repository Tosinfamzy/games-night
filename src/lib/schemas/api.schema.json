{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["App"]
      }
    },
    "/games": {
      "get": {
        "description": "Returns the predefined set of games with their rules",
        "operationId": "GamesController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all games",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Game"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all games",
        "tags": ["games"]
      },
      "post": {
        "operationId": "GamesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Game creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGameDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Game created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Game"
                }
              }
            }
          }
        },
        "summary": "Create a new game",
        "tags": ["games"]
      }
    },
    "/games/{id}/players": {
      "get": {
        "operationId": "GamesController_getGamePlayers",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Game ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all players in the game with their status and session info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "players": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string",
                            "enum": ["joined", "ready"]
                          },
                          "joinedAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "session": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number"
                              },
                              "sessionName": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all players in a specific game",
        "tags": ["games"]
      },
      "post": {
        "operationId": "GamesController_addPlayer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Game ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPlayerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Player added to game successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameParticipant"
                }
              }
            }
          }
        },
        "summary": "Add a player to a game",
        "tags": ["games"]
      }
    },
    "/games/{id}/setup": {
      "put": {
        "operationId": "GamesController_setup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Game ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameSetupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Game setup successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Game"
                }
              }
            }
          }
        },
        "summary": "Setup a game with initial configuration",
        "tags": ["games"]
      }
    },
    "/games/{id}/players/{playerId}/ready": {
      "put": {
        "operationId": "GamesController_playerReady",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Game ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "description": "Player ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player marked as ready successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameParticipant"
                }
              }
            }
          }
        },
        "summary": "Mark a player as ready in a game",
        "tags": ["games"]
      }
    },
    "/games/{id}/players/{playerId}": {
      "delete": {
        "operationId": "GamesController_removePlayer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Game ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "description": "Player ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player removed from game successfully"
          }
        },
        "summary": "Remove a player from a game",
        "tags": ["games"]
      }
    },
    "/games/{id}/start": {
      "post": {
        "operationId": "GamesController_startGame",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Game ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Game"
                }
              }
            }
          }
        },
        "summary": "Start the game",
        "tags": ["games"]
      }
    },
    "/games/{id}/complete": {
      "post": {
        "operationId": "GamesController_completeGame",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Game ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Game"
                }
              }
            }
          }
        },
        "summary": "Complete the game",
        "tags": ["games"]
      }
    },
    "/games/{id}/state": {
      "put": {
        "operationId": "GamesController_updateGameState",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Game ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game state updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Game"
                }
              }
            }
          }
        },
        "summary": "Update game state",
        "tags": ["games"]
      }
    },
    "/games/{id}/rules": {
      "get": {
        "operationId": "GamesController_getGameRules",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Game ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all rules for the game",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rule"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all rules for a game",
        "tags": ["games"]
      },
      "post": {
        "operationId": "GamesController_addRule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Game ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRuleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rule added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rule"
                }
              }
            }
          }
        },
        "summary": "Add a new rule to a game",
        "tags": ["games"]
      }
    },
    "/games/rules/{ruleId}": {
      "get": {
        "operationId": "GamesController_getRule",
        "parameters": [
          {
            "name": "ruleId",
            "required": true,
            "in": "path",
            "description": "Rule ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rule"
                }
              }
            }
          }
        },
        "summary": "Get a specific rule",
        "tags": ["games"]
      },
      "put": {
        "operationId": "GamesController_updateRule",
        "parameters": [
          {
            "name": "ruleId",
            "required": true,
            "in": "path",
            "description": "Rule ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rule"
                }
              }
            }
          }
        },
        "summary": "Update a rule",
        "tags": ["games"]
      },
      "delete": {
        "operationId": "GamesController_deleteRule",
        "parameters": [
          {
            "name": "ruleId",
            "required": true,
            "in": "path",
            "description": "Rule ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rule deleted successfully"
          }
        },
        "summary": "Delete a rule",
        "tags": ["games"]
      }
    },
    "/games/initialize-defaults": {
      "post": {
        "operationId": "GamesController_initializeDefaults",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Default games and rules initialized"
          }
        },
        "summary": "Initialize default games and rules",
        "tags": ["games"]
      }
    },
    "/games/{gameId}/rules": {
      "post": {
        "operationId": "GameRulesController_create",
        "parameters": [
          {
            "name": "gameId",
            "required": true,
            "in": "path",
            "description": "ID of the game",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGameRulesDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Game rules created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameRules"
                }
              }
            }
          },
          "404": {
            "description": "Game not found"
          }
        },
        "summary": "Create new game rules version",
        "tags": ["game-rules"]
      },
      "get": {
        "operationId": "GameRulesController_findAll",
        "parameters": [
          {
            "name": "gameId",
            "required": true,
            "in": "path",
            "description": "ID of the game",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all versions of game rules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameRules"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all versions of game rules",
        "tags": ["game-rules"]
      }
    },
    "/games/{gameId}/rules/active": {
      "get": {
        "operationId": "GameRulesController_findActive",
        "parameters": [
          {
            "name": "gameId",
            "required": true,
            "in": "path",
            "description": "ID of the game",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns active version of game rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameRules"
                }
              }
            }
          },
          "404": {
            "description": "No active rules found"
          }
        },
        "summary": "Get active version of game rules",
        "tags": ["game-rules"]
      }
    },
    "/games/{gameId}/rules/{version}": {
      "get": {
        "operationId": "GameRulesController_findOne",
        "parameters": [
          {
            "name": "gameId",
            "required": true,
            "in": "path",
            "description": "ID of the game",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "description": "Version number (e.g., 1.0.0)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns specific version of game rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameRules"
                }
              }
            }
          },
          "404": {
            "description": "Version not found"
          }
        },
        "summary": "Get specific version of game rules",
        "tags": ["game-rules"]
      }
    },
    "/games/{gameId}/rules/{version}/activate": {
      "post": {
        "operationId": "GameRulesController_setActive",
        "parameters": [
          {
            "name": "gameId",
            "required": true,
            "in": "path",
            "description": "ID of the game",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "description": "Version number to activate",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version activated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameRules"
                }
              }
            }
          },
          "404": {
            "description": "Version not found"
          }
        },
        "summary": "Set specific version as active",
        "tags": ["game-rules"]
      }
    },
    "/games/{gameId}/rules/{version1}/compare/{version2}": {
      "get": {
        "operationId": "GameRulesController_compareVersions",
        "parameters": [
          {
            "name": "gameId",
            "required": true,
            "in": "path",
            "description": "ID of the game",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version1",
            "required": true,
            "in": "path",
            "description": "First version to compare",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version2",
            "required": true,
            "in": "path",
            "description": "Second version to compare",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns differences between versions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "One or both versions not found"
          }
        },
        "summary": "Compare two versions of game rules",
        "tags": ["game-rules"]
      }
    },
    "/sessions": {
      "post": {
        "operationId": "SessionsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Only hosts can create sessions"
          },
          "404": {
            "description": "Host player not found"
          }
        },
        "summary": "Create a new game session (Host only)",
        "tags": ["sessions"]
      },
      "get": {
        "operationId": "SessionsController_findAll",
        "parameters": [
          {
            "name": "hostId",
            "required": true,
            "in": "query",
            "description": "ID of the host",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all sessions for the host",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Only hosts can view sessions"
          }
        },
        "summary": "Get all sessions for a host",
        "tags": ["sessions"]
      }
    },
    "/sessions/{id}": {
      "get": {
        "operationId": "SessionsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID (UUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hostId",
            "required": true,
            "in": "query",
            "description": "ID of the host",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Only hosts can view sessions"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Get a session by ID",
        "tags": ["sessions"]
      },
      "patch": {
        "operationId": "SessionsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID (UUID)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Only the host can update their sessions"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Update session details",
        "tags": ["sessions"]
      },
      "delete": {
        "operationId": "SessionsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID (UUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hostId",
            "required": true,
            "in": "query",
            "description": "ID of the host",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Session deleted successfully"
          },
          "403": {
            "description": "Only the host can delete their sessions"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Delete/End a session",
        "tags": ["sessions"]
      }
    },
    "/sessions/{id}/players": {
      "get": {
        "operationId": "SessionsController_getSessionPlayers",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID (UUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hostId",
            "required": true,
            "in": "query",
            "description": "ID of the host",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of players in the session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Player"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Only the host can view session players"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Get all players in a session",
        "tags": ["sessions"]
      },
      "post": {
        "operationId": "SessionsController_assignPlayers",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID (UUID)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignPlayersDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Players assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Assign players to a session",
        "tags": ["sessions"]
      }
    },
    "/sessions/{id}/teams/random": {
      "post": {
        "operationId": "SessionsController_createRandomTeams",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID (UUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hostId",
            "required": true,
            "in": "query",
            "description": "ID of the host",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Number of teams to create randomly",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRandomTeamsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Teams created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Invalid number of teams"
          },
          "403": {
            "description": "Only the host can create teams in their sessions"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Create random teams in a session",
        "tags": ["sessions"]
      }
    },
    "/sessions/{id}/teams/custom": {
      "post": {
        "operationId": "SessionsController_createCustomTeams",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID (UUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hostId",
            "required": true,
            "in": "query",
            "description": "ID of the host",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Custom team configurations with player assignments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomTeamsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Teams created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Invalid team configuration"
          },
          "403": {
            "description": "Only the host can create teams in their sessions"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Create custom teams in a session",
        "tags": ["sessions"]
      }
    },
    "/sessions/{id}/start": {
      "post": {
        "operationId": "SessionsController_startSession",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID (UUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hostId",
            "required": true,
            "in": "query",
            "description": "ID of the host",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session started successfully"
          },
          "400": {
            "description": "Invalid session state"
          },
          "403": {
            "description": "Only the host can start their sessions"
          }
        },
        "summary": "Start a session",
        "tags": ["sessions"]
      }
    },
    "/sessions/{id}/end": {
      "post": {
        "operationId": "SessionsController_endSession",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID (UUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hostId",
            "required": true,
            "in": "query",
            "description": "ID of the host",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session ended successfully"
          },
          "400": {
            "description": "Invalid session state"
          },
          "403": {
            "description": "Only the host can end their sessions"
          }
        },
        "summary": "End a session",
        "tags": ["sessions"]
      }
    },
    "/sessions/{id}/next-game": {
      "post": {
        "operationId": "SessionsController_moveToNextGame",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID (UUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hostId",
            "required": true,
            "in": "query",
            "description": "ID of the host",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Moved to next game successfully"
          },
          "400": {
            "description": "No more games available"
          },
          "403": {
            "description": "Only the host can change games in their sessions"
          }
        },
        "summary": "Move to the next game in the session",
        "tags": ["sessions"]
      }
    },
    "/sessions/teams/{id}/players": {
      "put": {
        "operationId": "SessionsController_addPlayerToTeam",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Team ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player added to team successfully"
          }
        },
        "summary": "Add a player to a team",
        "tags": ["sessions"]
      }
    },
    "/sessions/teams/{id}/players/{playerId}": {
      "delete": {
        "operationId": "SessionsController_removePlayerFromTeam",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Team ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "description": "Player ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player removed from team successfully"
          }
        },
        "summary": "Remove a player from a team",
        "tags": ["sessions"]
      }
    },
    "/sessions/{id}/games": {
      "post": {
        "operationId": "SessionsController_addGames",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID (UUID)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddGamesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Games added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Cannot add games to non-pending session"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Add games to an existing session",
        "tags": ["sessions"]
      }
    },
    "/sessions/join": {
      "post": {
        "operationId": "SessionsController_joinSession",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully joined the session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Cannot join a completed session or player is already in this session"
          },
          "404": {
            "description": "Session not found or player not found"
          }
        },
        "summary": "Join an existing session using a join code",
        "tags": ["sessions"]
      }
    },
    "/sessions/lookup": {
      "post": {
        "operationId": "SessionsController_lookupSession",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "404": {
            "description": "No active session found with this join code"
          }
        },
        "summary": "Look up a session by join code without joining",
        "tags": ["sessions"]
      }
    },
    "/players": {
      "post": {
        "operationId": "PlayersController_addPlayer",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlayerDto"
              },
              "examples": {
                "example1": {
                  "value": {
                    "name": "John Doe",
                    "sessionId": "123e4567-e89b-12d3-a456-426614174000",
                    "type": "participant"
                  },
                  "description": "Example of adding a new participant"
                },
                "example2": {
                  "value": {
                    "name": "Jane Host",
                    "sessionId": "123e4567-e89b-12d3-a456-426614174000",
                    "type": "host"
                  },
                  "description": "Example of adding a host"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Player added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Add a new player to a session",
        "tags": ["players"]
      }
    },
    "/players/host": {
      "post": {
        "operationId": "PlayersController_createHost",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHostPlayerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The host player has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          },
          "404": {
            "description": "Session not found."
          }
        },
        "summary": "Create a new host player",
        "tags": ["players"]
      }
    },
    "/players/{id}": {
      "get": {
        "operationId": "PlayersController_getPlayer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Player ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          },
          "404": {
            "description": "Player not found"
          }
        },
        "summary": "Get a player by ID",
        "tags": ["players"]
      },
      "delete": {
        "operationId": "PlayersController_removePlayer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Player ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player removed successfully"
          },
          "404": {
            "description": "Player not found"
          }
        },
        "summary": "Remove a player from a session",
        "tags": ["players"]
      }
    },
    "/teams": {
      "post": {
        "operationId": "TeamsController_createTeam",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Team successfully created"
          },
          "400": {
            "description": "Invalid session ID format"
          }
        },
        "summary": "Create a new team",
        "tags": ["teams"]
      },
      "get": {
        "operationId": "TeamsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get all teams",
        "tags": ["teams"]
      }
    },
    "/teams/{id}": {
      "get": {
        "operationId": "TeamsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get team by ID",
        "tags": ["teams"]
      },
      "delete": {
        "operationId": "TeamsController_deleteTeam",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Delete a team",
        "tags": ["teams"]
      }
    },
    "/teams/session/{sessionId}": {
      "get": {
        "operationId": "TeamsController_findBySessionId",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get teams by session ID",
        "tags": ["teams"]
      }
    },
    "/teams/{id}/players": {
      "post": {
        "operationId": "TeamsController_addPlayerToTeam",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPlayerToTeamDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Add a player to a team",
        "tags": ["teams"]
      }
    },
    "/teams/{id}/players/{playerId}": {
      "delete": {
        "operationId": "TeamsController_removePlayerFromTeam",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Remove a player from a team",
        "tags": ["teams"]
      }
    },
    "/scoring/player": {
      "post": {
        "operationId": "ScoringController_addPointsToPlayer",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerScoreDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Points added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Score"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "summary": "Add points to a player in a specific game",
        "tags": ["scoring"]
      }
    },
    "/scoring/team": {
      "post": {
        "operationId": "ScoringController_addPointsToTeam",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamScoreDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Points added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Score"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "summary": "Add points to a team in a specific game",
        "tags": ["scoring"]
      }
    },
    "/scoring/leaderboard/{sessionId}/{gameId}": {
      "get": {
        "operationId": "ScoringController_getGameLeaderboard",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "description": "The session ID (UUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gameId",
            "required": true,
            "in": "path",
            "description": "The game ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned game leaderboard successfully"
          }
        },
        "summary": "Get leaderboard for a specific game in a session",
        "tags": ["scoring"]
      }
    },
    "/scoring/session/{sessionId}": {
      "get": {
        "operationId": "ScoringController_getSessionAggregatedScores",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "description": "The session ID (UUID)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned session aggregated scores successfully"
          }
        },
        "summary": "Get aggregated scores for all games in a session",
        "tags": ["scoring"]
      }
    },
    "/scoring/subscribe/{sessionId}": {
      "get": {
        "operationId": "ScoringController_subscribe",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "description": "The session ID (UUID)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscribed successfully"
          }
        },
        "summary": "Subscribe to session updates",
        "tags": ["scoring"]
      }
    },
    "/analytics/games/{gameId}": {
      "get": {
        "operationId": "AnalyticsController_getGameAnalytics",
        "parameters": [
          {
            "name": "gameId",
            "required": true,
            "in": "path",
            "description": "ID of the game",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns game analytics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameAnalytics"
                }
              }
            }
          },
          "404": {
            "description": "Game not found"
          }
        },
        "summary": "Get analytics for a specific game",
        "tags": ["analytics"]
      }
    },
    "/analytics/games/{gameId}/update": {
      "get": {
        "operationId": "AnalyticsController_updateGameAnalytics",
        "parameters": [
          {
            "name": "gameId",
            "required": true,
            "in": "path",
            "description": "ID of the game",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated game analytics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameAnalytics"
                }
              }
            }
          },
          "404": {
            "description": "Game not found"
          }
        },
        "summary": "Force update analytics for a specific game",
        "tags": ["analytics"]
      }
    }
  },
  "info": {
    "title": "Games Night API",
    "description": "API for managing game nights, players, teams, and scoring",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "games",
      "description": "Operations related to game management"
    },
    {
      "name": "sessions",
      "description": "Operations related to game sessions"
    },
    {
      "name": "players",
      "description": "Operations related to player management"
    },
    {
      "name": "teams",
      "description": "Operations related to team management"
    },
    {
      "name": "scoring",
      "description": "Operations related to scoring and leaderboards"
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "Session": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the session",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "hostId": {
            "type": "number",
            "description": "ID of the host who created this session",
            "example": 1
          },
          "sessionName": {
            "type": "string",
            "description": "Name of the session",
            "example": "Friday Night Games"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the session is currently active",
            "example": true
          },
          "joinCode": {
            "type": "string",
            "description": "Unique join code for players to join this session",
            "example": "ABC123"
          },
          "games": {
            "description": "Games included in this session",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Game"
            }
          },
          "players": {
            "description": "Players participating in this session",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            }
          },
          "startTime": {
            "format": "date-time",
            "type": "string",
            "description": "When the session started",
            "example": "2024-03-18T19:00:00Z"
          },
          "endTime": {
            "format": "date-time",
            "type": "string",
            "description": "When the session ended",
            "example": "2024-03-18T23:00:00Z"
          },
          "winner": {
            "type": "string",
            "description": "Winner of the session",
            "example": "Player 1"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the session was created",
            "example": "2024-03-18T18:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the session was last updated",
            "example": "2024-03-18T23:00:00Z"
          },
          "playerCount": {
            "type": "number",
            "description": "Number of players in the session"
          }
        },
        "required": [
          "id",
          "hostId",
          "sessionName",
          "isActive",
          "joinCode",
          "games",
          "players",
          "createdAt",
          "updatedAt",
          "playerCount"
        ]
      },
      "Team": {
        "type": "object",
        "properties": {}
      },
      "Player": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier of the player",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the player",
            "example": "John Doe",
            "minLength": 2,
            "maxLength": 50
          },
          "type": {
            "type": "string",
            "description": "Type of player (host or participant)",
            "enum": ["host", "participant"],
            "example": "participant"
          },
          "session": {
            "description": "The session this player belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ]
          },
          "team": {
            "description": "The team this player belongs to (if any)",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Team"
              }
            ]
          },
          "gameParticipants": {
            "description": "Game participations of this player",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameParticipant"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the player was created",
            "example": "2024-03-18T19:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the player was last updated",
            "example": "2024-03-18T23:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "session",
          "team",
          "gameParticipants",
          "createdAt",
          "updatedAt"
        ]
      },
      "GameParticipant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The unique identifier for the game participant",
            "example": 1
          },
          "status": {
            "type": "string",
            "description": "Current status of the participant",
            "enum": ["joined", "ready"],
            "example": "joined"
          },
          "game": {
            "description": "The game this participant is in",
            "allOf": [
              {
                "$ref": "#/components/schemas/Game"
              }
            ]
          },
          "player": {
            "description": "The player participating in the game",
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the participant joined",
            "example": "2024-03-18T12:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the participant was last updated",
            "example": "2024-03-18T12:00:00Z"
          }
        },
        "required": ["id", "status", "game", "player", "createdAt", "updatedAt"]
      },
      "Rule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier of the rule",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the rule",
            "example": "No Stacking"
          },
          "description": {
            "type": "string",
            "description": "Description of what the rule does",
            "example": "Players cannot stack +2 or +4 cards"
          },
          "isDefaultEnabled": {
            "type": "boolean",
            "description": "Whether this rule is enabled by default",
            "example": true
          },
          "game": {
            "description": "The game this rule belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/Game"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the rule was created",
            "example": "2024-03-18T12:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the rule was last updated",
            "example": "2024-03-18T12:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "isDefaultEnabled",
          "game",
          "createdAt",
          "updatedAt"
        ]
      },
      "Game": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The unique identifier for the game",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the game",
            "example": "UNO"
          },
          "type": {
            "type": "string",
            "description": "Type of game",
            "enum": [
              "uno",
              "articulate",
              "cards_against_humanity",
              "blackjack"
            ],
            "example": "uno"
          },
          "description": {
            "type": "string",
            "description": "Description of the game",
            "example": "A classic card game where players race to empty their hands"
          },
          "state": {
            "type": "string",
            "description": "Current state of the game",
            "enum": ["setup", "ready", "in_progress", "paused", "completed"],
            "example": "setup"
          },
          "currentRound": {
            "type": "number",
            "description": "Current round number",
            "example": 1
          },
          "totalRounds": {
            "type": "number",
            "description": "Total number of rounds",
            "example": 5
          },
          "analytics": {
            "description": "Analytics for this game",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameAnalytics"
            }
          },
          "participants": {
            "description": "Participants in this game",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameParticipant"
            }
          },
          "rules": {
            "description": "Rules available for this game",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          },
          "sessions": {
            "description": "Sessions this game belongs to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Session"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the game was created",
            "example": "2024-03-18T12:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the game was last updated",
            "example": "2024-03-18T12:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "state",
          "analytics",
          "participants",
          "rules",
          "sessions",
          "createdAt",
          "updatedAt"
        ]
      },
      "GameAnalytics": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The unique identifier for the analytics",
            "example": 1
          },
          "game": {
            "description": "The game these analytics belong to",
            "allOf": [
              {
                "$ref": "#/components/schemas/Game"
              }
            ]
          },
          "totalPlays": {
            "type": "number",
            "description": "Total number of times this game has been played",
            "example": 100
          },
          "averageDuration": {
            "type": "number",
            "description": "Average duration of a game session in minutes",
            "example": 45
          },
          "averagePlayers": {
            "type": "number",
            "description": "Average number of players per session",
            "example": 4
          },
          "statistics": {
            "type": "object",
            "description": "Detailed statistics in JSON format",
            "example": {
              "winRates": {
                "Player 1": 0.6,
                "Player 2": 0.4
              },
              "commonStrategies": ["Aggressive", "Defensive"]
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the analytics were created",
            "example": "2024-03-18T12:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the analytics were last updated",
            "example": "2024-03-18T12:00:00Z"
          }
        },
        "required": [
          "id",
          "game",
          "totalPlays",
          "averageDuration",
          "averagePlayers",
          "statistics",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateGameDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the game",
            "example": "UNO"
          },
          "type": {
            "type": "string",
            "description": "Type of game",
            "enum": [
              "uno",
              "articulate",
              "cards_against_humanity",
              "blackjack"
            ],
            "example": "uno"
          },
          "description": {
            "type": "string",
            "description": "Description of the game",
            "example": "A classic card game where players race to empty their hands"
          }
        },
        "required": ["name", "type"]
      },
      "GameSetupDto": {
        "type": "object",
        "properties": {
          "totalRounds": {
            "type": "number",
            "description": "Total number of rounds for the game",
            "example": 5
          },
          "setup": {
            "type": "object",
            "description": "Game setup configuration",
            "example": {
              "timeLimit": 60
            }
          }
        },
        "required": ["totalRounds", "setup"]
      },
      "AddPlayerDto": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "number",
            "description": "ID of the player to add to the game",
            "example": 1
          }
        },
        "required": ["playerId"]
      },
      "CreateRuleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the rule",
            "example": "No Stacking"
          },
          "description": {
            "type": "string",
            "description": "Description of what the rule does",
            "example": "Players cannot stack +2 or +4 cards"
          },
          "isDefaultEnabled": {
            "type": "boolean",
            "description": "Whether this rule is enabled by default",
            "example": true
          }
        },
        "required": ["name", "description"]
      },
      "CreateGameRulesDto": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "Version number following semantic versioning (e.g., 1.0.0)",
            "example": "1.0.0"
          },
          "title": {
            "type": "string",
            "description": "Title of the rules version",
            "example": "Standard Rules v1.0"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the rules",
            "example": "Complete set of rules for playing the game..."
          },
          "rulesContent": {
            "type": "object",
            "description": "JSON structure containing the actual rules",
            "example": {
              "setup": ["Step 1", "Step 2"],
              "gameplay": ["Rule 1", "Rule 2"],
              "scoring": ["Point 1", "Point 2"]
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether this should be the active version",
            "example": true
          }
        },
        "required": ["version", "title", "description", "rulesContent"]
      },
      "GameRules": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier of the game rules",
            "example": 1
          },
          "version": {
            "type": "string",
            "description": "Version number of the rules",
            "example": "1.0.0"
          },
          "title": {
            "type": "string",
            "description": "Title of the rules version",
            "example": "Standard Rules v1.0"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the rules",
            "example": "Complete set of rules for playing the game..."
          },
          "rulesContent": {
            "type": "object",
            "description": "JSON structure containing the actual rules",
            "example": {
              "setup": ["Step 1", "Step 2"],
              "gameplay": ["Rule 1", "Rule 2"],
              "scoring": ["Point 1", "Point 2"]
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether this is the current active version",
            "example": true
          },
          "game": {
            "description": "The game these rules belong to",
            "allOf": [
              {
                "$ref": "#/components/schemas/Game"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the rules were created",
            "example": "2024-03-18T12:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the rules were last updated",
            "example": "2024-03-18T12:00:00Z"
          }
        },
        "required": [
          "id",
          "version",
          "title",
          "description",
          "rulesContent",
          "isActive",
          "game",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateSessionDto": {
        "type": "object",
        "properties": {
          "gameIds": {
            "description": "Array of game IDs that will be played in this session",
            "example": [1, 2, 3],
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "sessionName": {
            "type": "string",
            "description": "Name of the session",
            "example": "Friday Night Games",
            "minLength": 2,
            "maxLength": 50
          },
          "hostId": {
            "type": "number",
            "description": "ID of the host player creating the session",
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the session is currently active",
            "example": true,
            "default": true
          }
        },
        "required": ["sessionName", "hostId"]
      },
      "UpdateSessionDto": {
        "type": "object",
        "properties": {
          "hostId": {
            "type": "number",
            "description": "ID of the host who owns this session",
            "example": 1
          },
          "sessionName": {
            "type": "string",
            "description": "New name for the game session",
            "example": "Saturday Night Bash",
            "minLength": 3,
            "maxLength": 100
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the session is currently active",
            "example": false
          }
        },
        "required": ["hostId"]
      },
      "PlayerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the player",
            "example": "John Doe",
            "minLength": 2,
            "maxLength": 50
          }
        },
        "required": ["name"]
      },
      "AssignPlayersDto": {
        "type": "object",
        "properties": {
          "hostId": {
            "type": "number",
            "description": "ID of the host player",
            "example": 1
          },
          "players": {
            "description": "Array of players to add to the session",
            "example": [
              {
                "name": "John Doe"
              },
              {
                "name": "Jane Smith"
              },
              {
                "name": "Mike Johnson"
              }
            ],
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerDto"
            }
          }
        },
        "required": ["hostId", "players"]
      },
      "CreateRandomTeamsDto": {
        "type": "object",
        "properties": {
          "numberOfTeams": {
            "type": "number",
            "description": "Number of teams to create randomly",
            "example": 2,
            "minimum": 1
          }
        },
        "required": ["numberOfTeams"]
      },
      "TeamConfig": {
        "type": "object",
        "properties": {
          "teamName": {
            "type": "string",
            "description": "Name of the team",
            "example": "Team Alpha"
          },
          "playerIds": {
            "description": "Array of player IDs to assign to the team",
            "example": [1, 2, 3],
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": ["teamName", "playerIds"]
      },
      "CreateCustomTeamsDto": {
        "type": "object",
        "properties": {
          "teams": {
            "description": "Array of team configurations with player assignments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamConfig"
            }
          }
        },
        "required": ["teams"]
      },
      "AddGamesDto": {
        "type": "object",
        "properties": {
          "hostId": {
            "type": "number",
            "description": "ID of the host who owns this session",
            "example": 1
          },
          "gameIds": {
            "description": "Array of game IDs to add to the session",
            "example": [1, 2, 3],
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": ["hostId", "gameIds"]
      },
      "JoinSessionDto": {
        "type": "object",
        "properties": {
          "joinCode": {
            "type": "string",
            "description": "The join code for the session",
            "example": "ABC123"
          },
          "playerId": {
            "type": "number",
            "description": "ID of the player joining the session",
            "example": 1
          }
        },
        "required": ["joinCode", "playerId"]
      },
      "LookupSessionDto": {
        "type": "object",
        "properties": {
          "joinCode": {
            "type": "string",
            "description": "The join code for the session",
            "example": "ABC123"
          }
        },
        "required": ["joinCode"]
      },
      "CreatePlayerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the player",
            "example": "John Doe",
            "minLength": 2,
            "maxLength": 50
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID to join",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "Type of player (host or participant)",
            "enum": ["host", "participant"],
            "example": "participant"
          }
        },
        "required": ["name", "sessionId"]
      },
      "CreateHostPlayerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the host player",
            "example": "John Doe",
            "minLength": 2,
            "maxLength": 50
          }
        },
        "required": ["name"]
      },
      "AddPlayerToTeamDto": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "number",
            "description": "Player ID to add to the team",
            "example": 1
          }
        },
        "required": ["playerId"]
      },
      "PlayerScoreDto": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "number",
            "description": "The ID of the player to add points to",
            "example": 1
          },
          "gameId": {
            "type": "number",
            "description": "The ID of the game the points are for",
            "example": 1
          },
          "points": {
            "type": "number",
            "description": "The number of points to add",
            "example": 5
          }
        },
        "required": ["playerId", "gameId", "points"]
      },
      "Score": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The unique identifier for the score",
            "example": 1
          },
          "points": {
            "type": "number",
            "description": "The number of points awarded",
            "example": 5
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the score was created"
          },
          "game": {
            "description": "The game this score belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/Game"
              }
            ]
          }
        },
        "required": ["id", "points", "createdAt", "game"]
      },
      "TeamScoreDto": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "number",
            "description": "The ID of the team to add points to",
            "example": 1
          },
          "gameId": {
            "type": "number",
            "description": "The ID of the game the points are for",
            "example": 1
          },
          "points": {
            "type": "number",
            "description": "The number of points to add",
            "example": 10
          }
        },
        "required": ["teamId", "gameId", "points"]
      }
    }
  }
}
